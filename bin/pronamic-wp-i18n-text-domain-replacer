#!/usr/bin/env php
<?php

$options = getopt(
	'',
	[
		'dir::',
		'exclude::',
		'text-domain-search:',
		'text-domain-replace:',
	]
);

$dir = __DIR__;

if ( array_key_exists( 'dir', $options ) ) {
	$dir = $options['dir'];
}

$exclude = [];

if ( array_key_exists( 'exclude', $options ) ) {
	$exclude = $options['exclude'];
}

if ( ! is_array( $exclude ) ) {
	$exclude = [ $exclude ];
}

$text_domain_search = $options['text-domain-search'];

if ( ! is_array( $text_domain_search ) ) {
	$text_domain_search = [ $text_domain_search ];
}

$text_domain_replace = $options['text-domain-replace'];

echo 'Working directory: ', $dir, PHP_EOL;
echo 'Excluding directories: ', implode( ', ', $exclude ), PHP_EOL;
echo 'Text domain search: ', implode( ', ', $text_domain_search ), PHP_EOL;
echo 'Text domain replace: ', $text_domain_replace, PHP_EOL;

$directory_iterator = new RecursiveDirectoryIterator(
	$dir,
	RecursiveDirectoryIterator::SKIP_DOTS
);

$exclude_filter_iterator = new RecursiveCallbackFilterIterator(
	$directory_iterator,
	function ( $current ) use ( $exclude ) {
		return ! in_array( $current->getFilename(), $exclude, true );
	}
);

$block_json_filter_iterator = new RecursiveCallbackFilterIterator(
	$exclude_filter_iterator,
	function ( $current ) {
		return $current->isFile() && $current->getFilename() === 'block.json';
	}
);

$block_json_files = new RecursiveIteratorIterator( $block_json_filter_iterator );

foreach ( $block_json_files as $file ) {
	echo "[INFO] Processing: ", $file->getPathname(), PHP_EOL;

	$contents = file_get_contents( $file );

	$pattern = '/(?<prefix>"textdomain"\s*:\s*")(?<domain>[a-zA-Z0-9_-]+)(?<suffix>")/';

	$replaced = preg_replace_callback(
		$pattern,
		function ( $matches ) use ( $text_domain_search, $text_domain_replace ) {
			if ( in_array( $matches['domain'], $text_domain_search, true ) ) {
				return $matches['prefix'] . $text_domain_replace . $matches['suffix'];
			}

			return $matches[0];
		},
		$contents
	);

	if ( $replaced !== $contents ) {
		file_put_contents( $file, $replaced );
		
		echo "[SUCCESS] Text domain replaced in: ", $file->getPathname(), PHP_EOL;
	} else {
		echo "[SKIP] No replacement needed for: ", $file->getPathname(), PHP_EOL;
	}
}

/**
 * Helper.
 */
function create_patterns( $functions ) {
	$patterns = [];

	foreach ( $functions as $function => $item ) {
		$pattern = [];

		$pattern[] = '(?<![a-zA-Z0-9_])'; 

		$pattern[] = '(?<prefix>' . $function . '\s*\(' . str_repeat( '\s*[^,]+,', $item['position'] - 1 ) . '\s*)';
		$pattern[] = '(?<quote>["\'])';
		$pattern[] = '(?<domain>[a-zA-Z0-9_-]+)';
		$pattern[] = '\k<quote>';

		$patterns[] = '/' . implode( '', $pattern ) . '/';
	}

	return $patterns;
}

/**
 * PHP functions.
 * 
 * @link https://github.com/WordPress/WordPress-Coding-Standards/blob/38168bc542ec3565c04f2a88498a2024cdfd9ba1/WordPress/Sniffs/Utils/I18nTextDomainFixerSniff.php#L72-L229
 */
$php_functions = [
	'load_textdomain'             => [
		'position' => 1,
		'name'     => 'domain',
	],
	'load_plugin_textdomain'      => [
		'position' => 1,
		'name'     => 'domain',
	],
	'load_muplugin_textdomain'    => [
		'position' => 1,
		'name'     => 'domain',
	],
	'load_theme_textdomain'       => [
		'position' => 1,
		'name'     => 'domain',
	],
	'load_child_theme_textdomain' => [
		'position' => 1,
		'name'     => 'domain',
	],
	'load_script_textdomain'      => [
		'position' => 2,
		'name'     => 'domain',
	],
	'unload_textdomain'           => [
		'position' => 1,
		'name'     => 'domain',
	],

	'__'                          => [
		'position' => 2,
		'name'     => 'domain',
	],
	'_e'                          => [
		'position' => 2,
		'name'     => 'domain',
	],
	'_x'                          => [
		'position' => 3,
		'name'     => 'domain',
	],
	'_ex'                         => [
		'position' => 3,
		'name'     => 'domain',
	],
	'_n'                          => [
		'position' => 4,
		'name'     => 'domain',
	],
	'_nx'                         => [
		'position' => 5,
		'name'     => 'domain',
	],
	'_n_noop'                     => [
		'position' => 3,
		'name'     => 'domain',
	],
	'_nx_noop'                    => [
		'position' => 4,
		'name'     => 'domain',
	],
	'translate_nooped_plural'     => [
		'position' => 3,
		'name'     => 'domain',
	],

	'esc_html__'                  => [
		'position' => 2,
		'name'     => 'domain',
	],
	'esc_html_e'                  => [
		'position' => 2,
		'name'     => 'domain',
	],
	'esc_html_x'                  => [
		'position' => 3,
		'name'     => 'domain',
	],
	'esc_attr__'                  => [
		'position' => 2,
		'name'     => 'domain',
	],
	'esc_attr_e'                  => [
		'position' => 2,
		'name'     => 'domain',
	],
	'esc_attr_x'                  => [
		'position' => 3,
		'name'     => 'domain',
	],

	'is_textdomain_loaded'        => [
		'position' => 1,
		'name'     => 'domain',
	],
	'get_translations_for_domain' => [
		'position' => 1,
		'name'     => 'domain',
	],
];

/**
 * JavaScript functions.
 * 
 * @link https://github.com/WordPress/gutenberg/blob/ab5c79cd40adbb68898536c50e035b0a734338ea/packages/i18n/src/index.js#L9-L12
 */
$js_functions = [
	'__'  => [
		'position' => 2,
		'name'     => 'domain',
	],
	'_x'  => [
		'position' => 3,
		'name'     => 'domain',
	],
	'_n'  => [
		'position' => 4,
		'name'     => 'domain',
	],
	'_nx' => [
		'position' => 5,
		'name'     => 'domain',
	],
];

/**
 * Types
 */
$types = [
	'js'  => $js_functions,
	'php' => $php_functions,
];

foreach ( $types as $type => $functions ) {
	$patterns = create_patterns( $functions );

	$filter_iterator = new RecursiveCallbackFilterIterator(
		$exclude_filter_iterator,
		function ( $current ) use ( $type ){
			return $current->isFile() && $current->getExtension() === $type;
		}
	);

	$files = new RecursiveIteratorIterator( $filter_iterator );

	foreach ( $files as $file ) {
		echo "[INFO] Processing: ", $file->getPathname(), PHP_EOL;

		$orignial = file_get_contents( $file );

		$contents = $orignial;

		foreach ( $patterns as $pattern ) {
			$contents = preg_replace_callback( 
				$pattern,
				function ( $matches ) use ( $text_domain_search, $text_domain_replace ) {
					if ( in_array( $matches['domain'], $text_domain_search, true ) ) {
						return $matches['prefix'] . $matches['quote'] . $text_domain_replace . $matches['quote'];
					}

					return $matches[0];
				},
				$contents
			);
		}

		if ( $orignial !== $contents ) {
			file_put_contents( $file, $contents );
			
			echo "[SUCCESS] Text domain replaced in: ", $file->getPathname(), PHP_EOL;
		} else {
			echo "[SKIP] No replacement needed for: ", $file->getPathname(), PHP_EOL;
		}
	}
}
